//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ado7_1EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TeachersDbEntities : DbContext
    {
        public TeachersDbEntities()
            : base("name=TeachersDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Achievement> Achievements { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Faculty> Faculties { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<AllInSummer> AllInSummers { get; set; }
        public virtual DbSet<StudentAssesment> StudentAssesments { get; set; }
        public virtual DbSet<Students1998> Students1998 { get; set; }
        public virtual DbSet<StudentsInsertAllow> StudentsInsertAllows { get; set; }
        public virtual DbSet<StudentsWithoutAssesment> StudentsWithoutAssesments { get; set; }
        public virtual DbSet<ViewDepartmentFaculty> ViewDepartmentFaculties { get; set; }
    
        [DbFunction("TeachersDbEntities", "GetAllPeoples")]
        public virtual IQueryable<GetAllPeoples_Result> GetAllPeoples()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllPeoples_Result>("[TeachersDbEntities].[GetAllPeoples]()");
        }
    
        public virtual int AddNewGroup(string groupName, Nullable<int> faculty, ObjectParameter groupId)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            var facultyParameter = faculty.HasValue ?
                new ObjectParameter("faculty", faculty) :
                new ObjectParameter("faculty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewGroup", groupNameParameter, facultyParameter, groupId);
        }
    
        public virtual ObjectResult<ShowGroupFaculty_Result> ShowGroupFaculty(string faculty)
        {
            var facultyParameter = faculty != null ?
                new ObjectParameter("faculty", faculty) :
                new ObjectParameter("faculty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowGroupFaculty_Result>("ShowGroupFaculty", facultyParameter);
        }
    
        public virtual int TeacherAgeById(Nullable<int> id, ObjectParameter age, ObjectParameter day, ObjectParameter month)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeacherAgeById", idParameter, age, day, month);
        }
    }
}
